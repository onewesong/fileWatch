<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .title }}</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="/static/css/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="container-fluid">
        <header class="bg-dark text-white p-3">
            <h1 class="mb-0">Mac文件访问监控系统</h1>
        </header>

        <main class="container py-4">
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title h4">控制面板</h2>
                        </div>
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-3">
                                <button id="startMonitorBtn" class="btn btn-primary">开始监控</button>
                                <button id="stopMonitorBtn" class="btn btn-danger" disabled>停止监控</button>
                            </div>
                            <div class="alert alert-info" id="statusAlert">
                                <p>监控状态: <span id="monitorStatus">未运行</span></p>
                                <p id="commandInfo" class="small d-none">运行命令: <code>sudo fs_usage -f filesystem</code></p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h2 class="card-title h4">进程文件访问统计</h2>
                        </div>
                        <div class="card-body">
                            <canvas id="processChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- 标签页导航 -->
            <ul class="nav nav-tabs mb-3" id="accessTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="recent-tab" data-bs-toggle="tab" data-bs-target="#recent-content" type="button" role="tab" aria-controls="recent-content" aria-selected="true">最近文件访问记录</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="process-detail-tab" data-bs-toggle="tab" data-bs-target="#process-detail-content" type="button" role="tab" aria-controls="process-detail-content" aria-selected="false">进程文件访问详情</button>
                </li>
            </ul>
            
            <!-- 标签页内容 -->
            <div class="tab-content" id="accessTabsContent">
                <!-- 第一个标签页：最近文件访问记录 -->
                <div class="tab-pane fade show active" id="recent-content" role="tabpanel" aria-labelledby="recent-tab">
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h2 class="card-title h4">最近文件访问记录</h2>
                            <button id="refreshBtn" class="btn btn-sm btn-outline-secondary">刷新数据</button>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>时间</th>
                                            <th>进程名</th>
                                            <th>操作</th>
                                            <th>文件路径</th>
                                        </tr>
                                    </thead>
                                    <tbody id="accessRecords">
                                        <tr>
                                            <td colspan="4" class="text-center">加载中...</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- 第二个标签页：进程文件访问详情 -->
                <div class="tab-pane fade" id="process-detail-content" role="tabpanel" aria-labelledby="process-detail-tab">
                    <div class="card mb-4">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h2 class="card-title h4">进程文件访问详情</h2>
                            <div class="d-flex align-items-center">
                                <select id="processSelector" class="form-select me-2">
                                    <option value="">请选择进程</option>
                                </select>
                                <button id="loadProcessFilesBtn" class="btn btn-sm btn-primary">查看文件</button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead>
                                        <tr>
                                            <th>时间</th>
                                            <th>操作</th>
                                            <th>文件路径</th>
                                        </tr>
                                    </thead>
                                    <tbody id="processFileRecords">
                                        <tr>
                                            <td colspan="3" class="text-center">请选择一个进程</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <footer class="bg-light text-center py-3">
            <p class="mb-0">© 2023 文件访问监控系统</p>
        </footer>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 全局变量
        let processChart = null;
        let isMonitoring = {{ if .monitoring }}true{{ else }}false{{ end }};
        
        // DOM元素
        const startBtn = document.getElementById('startMonitorBtn');
        const stopBtn = document.getElementById('stopMonitorBtn');
        const statusText = document.getElementById('monitorStatus');
        const commandInfo = document.getElementById('commandInfo');
        const refreshBtn = document.getElementById('refreshBtn');
        const accessTable = document.getElementById('accessRecords');
        
        // 初始化页面
        document.addEventListener('DOMContentLoaded', function() {
            updateButtonStates();
            loadRecentAccess();
            loadAccessSummary();
            
            // 注册事件处理器
            startBtn.addEventListener('click', startMonitoring);
            stopBtn.addEventListener('click', stopMonitoring);
            refreshBtn.addEventListener('click', function() {
                loadRecentAccess();
                loadAccessSummary();
            });
            
            // 进程文件访问详情
            const processSelector = document.getElementById('processSelector');
            const loadProcessFilesBtn = document.getElementById('loadProcessFilesBtn');
            
            // 初始加载进程列表
            loadProcessList();
            
            // 点击查看按钮时加载进程访问的文件
            loadProcessFilesBtn.addEventListener('click', function() {
                const selectedProcess = processSelector.value;
                if (selectedProcess) {
                    loadProcessFiles(selectedProcess);
                } else {
                    alert('请先选择一个进程');
                }
            });
        });
        
        // 开始监控
        function startMonitoring() {
            fetch('/api/monitor/start', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('错误: ' + data.error);
                    return;
                }
                
                isMonitoring = true;
                statusText.textContent = '正在运行';
                commandInfo.classList.remove('d-none');
                updateButtonStates();
            })
            .catch(error => {
                console.error('启动监控失败:', error);
                alert('启动监控失败: ' + error.message);
            });
        }
        
        // 停止监控
        function stopMonitoring() {
            fetch('/api/monitor/stop', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('错误: ' + data.error);
                    return;
                }
                
                isMonitoring = false;
                statusText.textContent = '未运行';
                commandInfo.classList.add('d-none');
                updateButtonStates();
            })
            .catch(error => {
                console.error('停止监控失败:', error);
                alert('停止监控失败: ' + error.message);
            });
        }
        
        // 更新按钮状态
        function updateButtonStates() {
            if (isMonitoring) {
                startBtn.disabled = true;
                stopBtn.disabled = false;
                statusText.textContent = '正在运行';
                commandInfo.classList.remove('d-none');
                document.getElementById('statusAlert').className = 'alert alert-success';
            } else {
                startBtn.disabled = false;
                stopBtn.disabled = true;
                statusText.textContent = '未运行';
                commandInfo.classList.add('d-none');
                document.getElementById('statusAlert').className = 'alert alert-info';
            }
        }
        
        // 加载最近文件访问记录
        function loadRecentAccess() {
            fetch('/api/recent')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    accessTable.innerHTML = `<tr><td colspan="4" class="text-danger">加载错误: ${data.error}</td></tr>`;
                    return;
                }
                
                if (data.length === 0) {
                    accessTable.innerHTML = `<tr><td colspan="4" class="text-center">暂无记录</td></tr>`;
                    return;
                }
                
                accessTable.innerHTML = '';
                data.forEach(record => {
                    const time = new Date(record.timestamp).toLocaleString();
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${time}</td>
                        <td>${record.process_name}${record.pid ? '.' + record.pid : ''}</td>
                        <td>${record.operation}</td>
                        <td class="text-truncate" style="max-width: 400px;" title="${record.file_path || '无文件路径'}">${record.file_path || '<无文件路径>'}</td>
                    `;
                    accessTable.appendChild(row);
                });
            })
            .catch(error => {
                console.error('加载文件访问记录失败:', error);
                accessTable.innerHTML = `<tr><td colspan="4" class="text-danger">加载失败: ${error.message}</td></tr>`;
            });
        }
        
        // 加载进程访问统计
        function loadAccessSummary() {
            fetch('/api/summary')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error('加载统计失败:', data.error);
                    return;
                }
                
                updateProcessChart(data);
            })
            .catch(error => {
                console.error('加载统计数据失败:', error);
            });
        }
        
        // 更新进程图表
        function updateProcessChart(data) {
            // 只显示前10个进程
            const topProcesses = data.slice(0, 10);
            
            const labels = topProcesses.map(item => item.process_name);
            const counts = topProcesses.map(item => item.count);
            
            const ctx = document.getElementById('processChart').getContext('2d');
            
            if (processChart) {
                processChart.destroy();
            }
            
            processChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '文件访问次数',
                        data: counts,
                        backgroundColor: 'rgba(54, 162, 235, 0.8)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // 加载进程列表
        function loadProcessList() {
            fetch('/api/summary')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error('加载进程列表失败:', data.error);
                    return;
                }
                
                const processSelector = document.getElementById('processSelector');
                // 清空现有选项，只保留第一个默认选项
                processSelector.innerHTML = '<option value="">请选择进程</option>';
                
                // 添加新选项
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.process_name;
                    option.textContent = `${item.process_name} (${item.count}次访问)`;
                    processSelector.appendChild(option);
                });
            })
            .catch(error => {
                console.error('加载进程列表失败:', error);
            });
        }
        
        // 加载指定进程访问的文件
        function loadProcessFiles(processName) {
            const processFileRecords = document.getElementById('processFileRecords');
            processFileRecords.innerHTML = '<tr><td colspan="3" class="text-center">加载中...</td></tr>';
            
            fetch(`/api/process-files?process=${encodeURIComponent(processName)}`)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    processFileRecords.innerHTML = `<tr><td colspan="3" class="text-danger">加载错误: ${data.error}</td></tr>`;
                    return;
                }
                
                if (data.length === 0) {
                    processFileRecords.innerHTML = `<tr><td colspan="3" class="text-center">未找到该进程的文件访问记录</td></tr>`;
                    return;
                }
                
                processFileRecords.innerHTML = '';
                data.forEach(record => {
                    const time = new Date(record.timestamp).toLocaleString();
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${time}</td>
                        <td>${record.operation}</td>
                        <td class="text-truncate" style="max-width: 500px;" title="${record.file_path || '无文件路径'}">${record.file_path || '<无文件路径>'}</td>
                    `;
                    processFileRecords.appendChild(row);
                });
            })
            .catch(error => {
                console.error('加载进程文件访问记录失败:', error);
                processFileRecords.innerHTML = `<tr><td colspan="3" class="text-danger">加载失败: ${error.message}</td></tr>`;
            });
        }
    </script>
</body>
</html> 