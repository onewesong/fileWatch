<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ .title }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        [x-cloak] { display: none !important; }
    </style>
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
</head>
<body class="bg-gray-100">
    <div class="min-h-screen flex flex-col">
        <header class="bg-gray-800 text-white p-3 shadow-md">
            <h1 class="text-2xl font-bold">Mac文件访问监控系统</h1>
        </header>

        <main class="container mx-auto px-4 py-6 flex-grow">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="bg-gray-100 px-4 py-3 border-b">
                        <h2 class="text-lg font-semibold text-gray-700">控制面板</h2>
                    </div>
                    <div class="p-4">
                        <div class="flex flex-col space-y-3 mb-4">
                            <div class="flex items-center">
                                <label for="includePatternInput" class="w-32 text-sm font-medium text-gray-700">包含目录通配符:</label>
                                <input type="text" id="includePatternInput" placeholder="(可选，例如: /Users/*.go 或 /src/**/*.js)" 
                                       class="flex-grow px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                            <div class="flex items-center">
                                <label for="excludePatternInput" class="w-32 text-sm font-medium text-gray-700">排除目录通配符:</label>
                                <input type="text" id="excludePatternInput" placeholder="(可选，例如: *.git 或 */node_modules/*)" 
                                       class="flex-grow px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                            <div class="flex items-center">
                                <label for="processPatternInput" class="w-32 text-sm font-medium text-gray-700">进程名通配符:</label>
                                <input type="text" id="processPatternInput" placeholder="(可选，例如: Chrome* 或 *java*)" 
                                       class="flex-grow px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            </div>
                            <div class="flex justify-end space-x-2 mt-2">
                                <button id="startMonitorBtn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">开始监控</button>
                                <button id="stopMonitorBtn" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300 disabled:opacity-50 disabled:cursor-not-allowed" disabled>停止监控</button>
                            </div>
                        </div>
                        <div id="statusAlert" class="bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded">
                            <p>监控状态: <span id="monitorStatus" class="font-medium">未运行</span></p>
                            <p id="commandInfo" class="text-sm hidden">运行命令: <code class="bg-blue-50 px-1 py-0.5 rounded">sudo fs_usage -f filesystem</code></p>
                        </div>
                    </div>
                </div>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="bg-gray-100 px-4 py-3 border-b">
                        <h2 class="text-lg font-semibold text-gray-700">进程文件访问统计</h2>
                    </div>
                    <div class="p-4">
                        <canvas id="processChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- 标签页导航 -->
            <div x-data="{ activeTab: 'recent' }">
                <div class="border-b border-gray-200">
                    <nav class="flex -mb-px">
                        <button 
                            @click="activeTab = 'recent'" 
                            :class="{ 'border-blue-500 text-blue-600': activeTab === 'recent', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'recent' }"
                            class="py-4 px-6 font-medium text-sm border-b-2 focus:outline-none">
                            最近文件访问记录
                        </button>
                        <button 
                            @click="activeTab = 'process'" 
                            :class="{ 'border-blue-500 text-blue-600': activeTab === 'process', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'process' }"
                            class="py-4 px-6 font-medium text-sm border-b-2 focus:outline-none">
                            进程文件访问详情
                        </button>
                        <button 
                            @click="activeTab = 'path'" 
                            :class="{ 'border-blue-500 text-blue-600': activeTab === 'path', 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300': activeTab !== 'path' }"
                            class="py-4 px-6 font-medium text-sm border-b-2 focus:outline-none">
                            文件路径搜索
                        </button>
                    </nav>
                </div>
                
                <!-- 标签页内容 -->
                <div class="mt-4">
                    <!-- 第一个标签页：最近文件访问记录 -->
                    <div x-show="activeTab === 'recent'" class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="bg-gray-100 px-4 py-3 border-b flex justify-between items-center">
                            <h2 class="text-lg font-semibold text-gray-700">最近文件访问记录</h2>
                            <div class="flex items-center space-x-2">
                                <div class="flex items-center mr-3">
                                    <input type="checkbox" id="autoRefreshToggle" class="mr-2 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded">
                                    <label for="autoRefreshToggle" class="text-sm text-gray-700">自动刷新</label>
                                </div>
                                <select id="refreshInterval" class="text-sm border border-gray-300 rounded px-2 py-1">
                                    <option value="5000">5秒</option>
                                    <option value="10000" selected>10秒</option>
                                    <option value="30000">30秒</option>
                                    <option value="60000">1分钟</option>
                                </select>
                                <button id="refreshBtn" class="px-3 py-1 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 text-sm">刷新数据</button>
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">时间</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">进程名</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">进程ID</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件路径</th>
                                    </tr>
                                </thead>
                                <tbody id="accessRecords" class="bg-white divide-y divide-gray-200">
                                    <tr>
                                        <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">加载中...</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- 第二个标签页：进程文件访问详情 -->
                    <div x-show="activeTab === 'process'" x-cloak class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="bg-gray-100 px-4 py-3 border-b flex justify-between items-center">
                            <h2 class="text-lg font-semibold text-gray-700">进程文件访问详情</h2>
                            <div class="flex items-center">
                                <select id="processSelector" class="mr-2 border border-gray-300 rounded px-3 py-1 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">请选择进程</option>
                                </select>
                                <button id="loadProcessFilesBtn" class="px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300 text-sm">查看文件</button>
                            </div>
                        </div>
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">时间</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件路径</th>
                                    </tr>
                                </thead>
                                <tbody id="processFileRecords" class="bg-white divide-y divide-gray-200">
                                    <tr>
                                        <td colspan="3" class="px-6 py-4 text-center text-sm text-gray-500">请选择一个进程</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- 第三个标签页：文件路径搜索 -->
                    <div x-show="activeTab === 'path'" x-cloak class="bg-white rounded-lg shadow-md overflow-hidden">
                        <div class="bg-gray-100 px-4 py-3 border-b">
                            <h2 class="text-lg font-semibold text-gray-700 mb-3">文件路径搜索</h2>
                            <div class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2">
                                <div class="flex-grow">
                                    <input type="text" id="pathPrefixInput" placeholder="输入文件路径前缀 (例如: /Users/)" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                </div>
                                <button id="searchPathBtn" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                    搜索
                                </button>
                            </div>
                        </div>
                        <div class="p-4">
                            <div id="pathSearchResults" class="hidden">
                                <h3 class="text-md font-medium text-gray-700 mb-2">搜索结果：<span id="pathPrefix" class="text-blue-600"></span></h3>
                                <div class="overflow-x-auto">
                                    <table class="min-w-full divide-y divide-gray-200">
                                        <thead class="bg-gray-50">
                                            <tr>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">时间</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">进程名</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">进程ID</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">操作</th>
                                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">文件路径</th>
                                            </tr>
                                        </thead>
                                        <tbody id="pathSearchRecords" class="bg-white divide-y divide-gray-200">
                                            <tr>
                                                <td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">请输入路径前缀并搜索</td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div id="noPathSearchYet" class="py-8 text-center text-gray-500">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 mb-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                </svg>
                                <p>请输入文件路径前缀并点击搜索按钮</p>
                                <p class="text-sm mt-2">例如：/Users/、/Applications/、/Library/</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <footer class="bg-white text-center py-4 mt-6 shadow-inner">
            <p class="text-gray-600">© 2023 文件访问监控系统</p>
        </footer>
    </div>

    <script>
        // 全局变量
        let processChart = null;
        let isMonitoring = {{ if .monitoring }}true{{ else }}false{{ end }};
        let currentIncludePattern = {{ if .includePattern }}"{{ .includePattern }}"{{ else }}""{{ end }};
        let currentExcludePattern = {{ if .excludePattern }}"{{ .excludePattern }}"{{ else }}""{{ end }};
        let currentProcessPattern = {{ if .processPattern }}"{{ .processPattern }}"{{ else }}""{{ end }};
        let autoRefreshTimer = null;
        
        // DOM元素
        const startBtn = document.getElementById('startMonitorBtn');
        const stopBtn = document.getElementById('stopMonitorBtn');
        const statusText = document.getElementById('monitorStatus');
        const commandInfo = document.getElementById('commandInfo');
        const refreshBtn = document.getElementById('refreshBtn');
        const accessTable = document.getElementById('accessRecords');
        
        // 初始化页面
        document.addEventListener('DOMContentLoaded', function() {
            // 设置之前的配置到输入框
            if (currentIncludePattern) {
                document.getElementById('includePatternInput').value = currentIncludePattern;
            }
            if (currentExcludePattern) {
                document.getElementById('excludePatternInput').value = currentExcludePattern;
            }
            if (currentProcessPattern) {
                document.getElementById('processPatternInput').value = currentProcessPattern;
            }
            
            updateButtonStates();
            loadRecentAccess();
            loadAccessSummary();
            
            // 注册事件处理器
            startBtn.addEventListener('click', startMonitoring);
            stopBtn.addEventListener('click', stopMonitoring);
            refreshBtn.addEventListener('click', function() {
                loadRecentAccess();
                loadAccessSummary();
            });
            
            // 自动刷新功能
            const autoRefreshToggle = document.getElementById('autoRefreshToggle');
            const refreshInterval = document.getElementById('refreshInterval');
            
            autoRefreshToggle.addEventListener('change', function() {
                if (this.checked) {
                    startAutoRefresh();
                } else {
                    stopAutoRefresh();
                }
            });
            
            refreshInterval.addEventListener('change', function() {
                if (autoRefreshToggle.checked) {
                    // 重启自动刷新以应用新间隔
                    stopAutoRefresh();
                    startAutoRefresh();
                }
            });
            
            // 进程文件访问详情
            const processSelector = document.getElementById('processSelector');
            const loadProcessFilesBtn = document.getElementById('loadProcessFilesBtn');
            
            // 初始加载进程列表
            loadProcessList();
            
            // 点击查看按钮时加载进程访问的文件
            loadProcessFilesBtn.addEventListener('click', function() {
                const selectedProcess = processSelector.value;
                if (selectedProcess) {
                    loadProcessFiles(selectedProcess);
                } else {
                    alert('请先选择一个进程');
                }
            });
            
            // 文件路径搜索
            const pathPrefixInput = document.getElementById('pathPrefixInput');
            const searchPathBtn = document.getElementById('searchPathBtn');
            
            // 注册搜索按钮事件
            searchPathBtn.addEventListener('click', function() {
                const pathPrefix = pathPrefixInput.value.trim();
                if (pathPrefix) {
                    searchByPathPrefix(pathPrefix);
                } else {
                    alert('请输入文件路径前缀');
                }
            });
            
            // 允许按回车键搜索
            pathPrefixInput.addEventListener('keyup', function(event) {
                if (event.key === 'Enter') {
                    searchPathBtn.click();
                }
            });
        });
        
        // 开始监控
        function startMonitoring() {
            const includePattern = document.getElementById('includePatternInput').value.trim();
            const excludePattern = document.getElementById('excludePatternInput').value.trim();
            const processPattern = document.getElementById('processPatternInput').value.trim();
            
            fetch('/api/monitor/start', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    includePattern: includePattern,
                    excludePattern: excludePattern,
                    processPattern: processPattern
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('错误: ' + data.error);
                    return;
                }
                
                isMonitoring = true;
                
                // 确保使用服务器返回的参数（以防服务器做了规范化处理）
                if (data.includePattern) {
                    document.getElementById('includePatternInput').value = data.includePattern;
                    currentIncludePattern = data.includePattern;
                }
                if (data.excludePattern) {
                    document.getElementById('excludePatternInput').value = data.excludePattern;
                    currentExcludePattern = data.excludePattern;
                }
                if (data.processPattern) {
                    document.getElementById('processPatternInput').value = data.processPattern;
                    currentProcessPattern = data.processPattern;
                }
                
                statusText.textContent = '正在运行';
                commandInfo.classList.remove('hidden');
                updateButtonStates();
            })
            .catch(error => {
                console.error('启动监控失败:', error);
                alert('启动监控失败: ' + error.message);
            });
        }
        
        // 停止监控
        function stopMonitoring() {
            fetch('/api/monitor/stop', {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('错误: ' + data.error);
                    return;
                }
                
                isMonitoring = false;
                statusText.textContent = '未运行';
                commandInfo.classList.add('hidden');
                updateButtonStates();
            })
            .catch(error => {
                console.error('停止监控失败:', error);
                alert('停止监控失败: ' + error.message);
            });
        }
        
        // 更新按钮状态
        function updateButtonStates() {
            const includePattern = document.getElementById('includePatternInput').value.trim();
            const excludePattern = document.getElementById('excludePatternInput').value.trim();
            const processPattern = document.getElementById('processPatternInput').value.trim();
            
            if (isMonitoring) {
                startBtn.disabled = true;
                stopBtn.disabled = false;
                document.getElementById('includePatternInput').disabled = true;
                document.getElementById('excludePatternInput').disabled = true;
                document.getElementById('processPatternInput').disabled = true;
                statusText.textContent = '正在运行';
                commandInfo.classList.remove('hidden');
                document.getElementById('statusAlert').className = 'bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded';
                
                // 显示监控配置信息
                let monitorInfo = `运行命令: <code class="bg-green-50 px-1 py-0.5 rounded">sudo fs_usage -f filesystem</code>`;
                
                if (includePattern) {
                    monitorInfo += `<br><span class="text-sm mt-1">包含目录通配符: <code class="bg-green-50 px-1 py-0.5 rounded">${includePattern}</code></span>`;
                }
                
                if (excludePattern) {
                    monitorInfo += `<br><span class="text-sm mt-1">排除目录通配符: <code class="bg-green-50 px-1 py-0.5 rounded">${excludePattern}</code></span>`;
                }
                
                if (processPattern) {
                    monitorInfo += `<br><span class="text-sm mt-1">进程名通配符: <code class="bg-green-50 px-1 py-0.5 rounded">${processPattern}</code></span>`;
                }
                
                commandInfo.innerHTML = monitorInfo;
            } else {
                startBtn.disabled = false;
                stopBtn.disabled = true;
                document.getElementById('includePatternInput').disabled = false;
                document.getElementById('excludePatternInput').disabled = false;
                document.getElementById('processPatternInput').disabled = false;
                statusText.textContent = '未运行';
                commandInfo.classList.add('hidden');
                document.getElementById('statusAlert').className = 'bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 rounded';
            }
        }
        
        // 加载最近文件访问记录
        function loadRecentAccess() {
            fetch('/api/recent')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    accessTable.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">加载错误: ${data.error}</td></tr>`;
                    return;
                }
                
                if (data.length === 0) {
                    accessTable.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">暂无记录</td></tr>`;
                    return;
                }
                
                accessTable.innerHTML = '';
                data.forEach(record => {
                    const time = new Date(record.timestamp).toLocaleString();
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.process_name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.pid || '-'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.operation}</td>
                        <td class="px-6 py-4 text-sm text-gray-500 truncate max-w-xs" title="${record.file_path || '无文件路径'}">${record.file_path || '<无文件路径>'}</td>
                    `;
                    accessTable.appendChild(row);
                });
            })
            .catch(error => {
                console.error('加载文件访问记录失败:', error);
                accessTable.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">加载失败: ${error.message}</td></tr>`;
            });
        }
        
        // 加载进程访问统计
        function loadAccessSummary() {
            fetch('/api/summary')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error('加载统计失败:', data.error);
                    return;
                }
                
                updateProcessChart(data);
            })
            .catch(error => {
                console.error('加载统计数据失败:', error);
            });
        }
        
        // 更新进程图表
        function updateProcessChart(data) {
            // 只显示前10个进程
            const topProcesses = data.slice(0, 10);
            
            const labels = topProcesses.map(item => item.process_name);
            const counts = topProcesses.map(item => item.count);
            
            const ctx = document.getElementById('processChart').getContext('2d');
            
            if (processChart) {
                processChart.destroy();
            }
            
            processChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: '文件访问次数',
                        data: counts,
                        backgroundColor: 'rgba(59, 130, 246, 0.8)',
                        borderColor: 'rgb(59, 130, 246)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // 加载进程列表
        function loadProcessList() {
            fetch('/api/summary')
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error('加载进程列表失败:', data.error);
                    return;
                }
                
                const processSelector = document.getElementById('processSelector');
                // 清空现有选项，只保留第一个默认选项
                processSelector.innerHTML = '<option value="">请选择进程</option>';
                
                // 添加新选项
                data.forEach(item => {
                    const option = document.createElement('option');
                    option.value = item.process_name;
                    option.textContent = `${item.process_name} (${item.count}次访问)`;
                    processSelector.appendChild(option);
                });
            })
            .catch(error => {
                console.error('加载进程列表失败:', error);
            });
        }
        
        // 加载指定进程访问的文件
        function loadProcessFiles(processName) {
            const processFileRecords = document.getElementById('processFileRecords');
            processFileRecords.innerHTML = '<tr><td colspan="3" class="px-6 py-4 text-center text-sm text-gray-500">加载中...</td></tr>';
            
            fetch(`/api/process-files?process=${encodeURIComponent(processName)}`)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    processFileRecords.innerHTML = `<tr><td colspan="3" class="px-6 py-4 text-center text-sm text-red-500">加载错误: ${data.error}</td></tr>`;
                    return;
                }
                
                if (data.length === 0) {
                    processFileRecords.innerHTML = `<tr><td colspan="3" class="px-6 py-4 text-center text-sm text-gray-500">未找到该进程的文件访问记录</td></tr>`;
                    return;
                }
                
                processFileRecords.innerHTML = '';
                data.forEach(record => {
                    const time = new Date(record.timestamp).toLocaleString();
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.operation}</td>
                        <td class="px-6 py-4 text-sm text-gray-500 truncate max-w-md" title="${record.file_path || '无文件路径'}">${record.file_path || '<无文件路径>'}</td>
                    `;
                    processFileRecords.appendChild(row);
                });
            })
            .catch(error => {
                console.error('加载进程文件访问记录失败:', error);
                processFileRecords.innerHTML = `<tr><td colspan="3" class="px-6 py-4 text-center text-sm text-red-500">加载失败: ${error.message}</td></tr>`;
            });
        }
        
        // 根据路径前缀搜索文件访问记录
        function searchByPathPrefix(pathPrefix) {
            const pathSearchRecords = document.getElementById('pathSearchRecords');
            const pathSearchResults = document.getElementById('pathSearchResults');
            const noPathSearchYet = document.getElementById('noPathSearchYet');
            const pathPrefixDisplay = document.getElementById('pathPrefix');
            
            // 显示搜索结果区域，隐藏提示区域
            pathSearchResults.classList.remove('hidden');
            noPathSearchYet.classList.add('hidden');
            
            // 显示正在搜索的路径前缀
            pathPrefixDisplay.textContent = pathPrefix;
            
            // 显示加载中
            pathSearchRecords.innerHTML = '<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">搜索中...</td></tr>';
            
            fetch(`/api/path-files?prefix=${encodeURIComponent(pathPrefix)}`)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    pathSearchRecords.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">搜索错误: ${data.error}</td></tr>`;
                    return;
                }
                
                if (data.length === 0) {
                    pathSearchRecords.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">未找到匹配的文件访问记录</td></tr>`;
                    return;
                }
                
                pathSearchRecords.innerHTML = '';
                data.forEach(record => {
                    const time = new Date(record.timestamp).toLocaleString();
                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-50';
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${time}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.process_name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.pid || '-'}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${record.operation}</td>
                        <td class="px-6 py-4 text-sm text-gray-500 truncate max-w-xs" title="${record.file_path || '无文件路径'}">${record.file_path || '<无文件路径>'}</td>
                    `;
                    pathSearchRecords.appendChild(row);
                });
            })
            .catch(error => {
                console.error('搜索文件路径记录失败:', error);
                pathSearchRecords.innerHTML = `<tr><td colspan="5" class="px-6 py-4 text-center text-sm text-red-500">搜索失败: ${error.message}</td></tr>`;
            });
        }
        
        // 开始自动刷新
        function startAutoRefresh() {
            // 先清除可能存在的定时器
            stopAutoRefresh();
            
            // 获取刷新间隔
            const interval = parseInt(document.getElementById('refreshInterval').value);
            
            // 设置新的定时器
            autoRefreshTimer = setInterval(function() {
                loadRecentAccess();
                // 可选：同时更新统计图表
                loadAccessSummary();
            }, interval);
        }
        
        // 停止自动刷新
        function stopAutoRefresh() {
            if (autoRefreshTimer) {
                clearInterval(autoRefreshTimer);
                autoRefreshTimer = null;
            }
        }
    </script>
</body>
</html> 